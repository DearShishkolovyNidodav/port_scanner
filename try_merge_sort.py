def heapify(arr, n, i):
    largest = i  # Инициализируем корень как наибольший элемент
    left = 2 * i + 1  # Левый дочерний элемент
    right = 2 * i + 2  # Правый дочерний элемент

    # Проверяем, существует ли левый дочерний элемент и больше ли он, чем корень
    if left < n and arr[left] > arr[largest]:
        largest = left

    # Проверяем, существует ли правый дочерний элемент и больше ли он, чем наибольший найденный элемент
    if right < n and arr[right] > arr[largest]:
        largest = right

    # Если наибольший элемент не корень, меняем их местами
    if largest != i:
        arr[i], arr[largest] = arr[largest], arr[i]  # Обмен местами

        # Рекурсивно восстанавливаем кучу для затронутого поддерева
        heapify(arr, n, largest)


def heap_sort(arr):
    n = len(arr)

    # Шаг 1: Построить максимальную кучу
    for i in range(n // 2 - 1, -1, -1):
        heapify(arr, n, i)

    # Шаг 2: Извлекать элементы из кучи один за другим
    for i in range(n - 1, 0, -1):
        arr[i], arr[0] = arr[0], arr[i]  # Перемещаем текущий корень в конец
        heapify(arr, i, 0)  # Восстанавливаем кучу для уменьшенной кучи


# Пример использования
if __name__ == "__main__":
    data = [12, 11, 13, 5, 6, 7]
    print("Исходный массив:", data)
    heap_sort(data)
    print("Отсортированный массив:", data)

